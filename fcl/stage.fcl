// Block definition (there may be more than one block per file)
FUNCTION_BLOCK checkers

// Define input variables
VAR_INPUT
    playerPieces : REAL;
    cpuPieces : REAL;
	turns : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    stage : REAL;
END_VAR

FUZZIFY playerPieces
    TERM low := (0, 1) (3, 1) (3, 1) (4, 0); 
    TERM medium := (4, 0) (4, 1) (9, 1) (9, 1) (10, 0);
    TERM high := (9, 0) (11, 1) (12, 1);
END_FUZZIFY

FUZZIFY cpuPieces
    TERM low := (0, 1) (3, 1) (3, 1) (4, 0); 
    TERM medium := (4, 0) (4, 1) (9, 1) (9, 1) (10, 0);
    TERM high := (9, 0) (11, 1) (12, 1);
END_FUZZIFY

FUZZIFY turns
    TERM low := (0, 1) (4, 0); 
	TERM lowmed := (2, 0) (4, 1) (8, 0); 
    TERM medium := (6, 0) (9, 1) (12, 0);
	TERM medhigh := (10, 0) (14, 1) (16, 0);
    TERM high := (15, 0) (20, 1);
END_FUZZIFY


DEFUZZIFY stage
    TERM beggining := (0,1) (0.4, 0) (1,0);
    TERM middle := (0.1, 0) (0.5, 1) (0.9, 0) (1, 0);
    TERM end := (0.6, 0) (1, 1);
	
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF cpuPieces IS high AND playerPieces IS high AND turns is low 
                THEN stage IS beggining;

    RULE 2 : IF cpuPieces IS high AND playerPieces IS high AND turns is medium 
                THEN stage IS beggining;
				
	RULE 3 : IF cpuPieces IS high AND playerPieces IS high AND turns is medhigh 
                THEN stage IS beggining;

	RULE 4 : IF cpuPieces IS medium AND playerPieces IS high AND turns is low 
                THEN stage IS beggining;

	RULE 5 : IF cpuPieces IS medium AND playerPieces IS high AND turns is medium 
                THEN stage IS beggining;	

	RULE 6 : IF cpuPieces IS medium AND playerPieces IS medium AND turns is medium 
                THEN stage IS middle;		

	RULE 7 : IF cpuPieces IS low AND playerPieces IS high AND turns is low 
                THEN stage IS end;

	RULE 8 : IF cpuPieces IS low AND playerPieces IS high AND turns is medium 
                THEN stage IS end;	

	RULE 9 : IF cpuPieces IS low AND playerPieces IS high AND turns is lowmed 
                THEN stage IS end;
				
	RULE 10 : IF cpuPieces IS high AND playerPieces IS high AND turns is medhigh 
                THEN stage IS end;

	RULE 11 : IF cpuPieces IS high AND playerPieces IS high AND turns is high
                THEN stage IS end;	

	RULE 12 : IF cpuPieces IS medium AND playerPieces IS medium AND turns is lowmed 
                THEN stage IS middle;
				
	RULE 13 : IF cpuPieces IS medium AND playerPieces IS medium AND turns is medium 
                THEN stage IS middle;			
				
				
END_RULEBLOCK

END_FUNCTION_BLOCK